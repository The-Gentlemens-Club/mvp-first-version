import { useState } from 'react';

// Main App component for the eligibility verification tool
export default function App() {
  // State variables to manage the user's country, eligibility status, loading state, and any error messages.
  const [userCountry, setUserCountry] = useState('');
  const [isEligible, setIsEligible] = useState(null); // null: not checked, true: eligible, false: not eligible
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  // Define the list of countries where the Curacao license is generally NOT accepted.
  // This list should be kept up-to-date and ideally managed server-side for robust compliance.
  const restrictedCountries = [
    'United States', // USA
    'United Kingdom', // UK
    'France',
    'Germany',
    'Australia',
    'Netherlands',
    'Curacao',
    // Note: FATF blacklisted countries are dynamic and require a more sophisticated,
    // server-side check for real-time compliance. This client-side demo focuses
    // on the static, commonly known restricted list.
  ];

  /**
   * Fetches the user's IP address and then uses a public API to determine their country.
   * Compares the determined country against a list of restricted countries.
   * Updates the UI with eligibility status or an error message.
   */
  const verifyEligibility = async () => {
    setIsLoading(true);
    setErrorMessage('');
    setIsEligible(null); // Reset eligibility status
    setUserCountry('');

    try {
      // Step 1: Get user's public IP address using a simple public IP API.
      // This is a common way to get IP from client-side.
      const ipResponse = await fetch('https://api.ipify.org?format=json');
      if (!ipResponse.ok) {
        throw new Error(`Failed to get IP address: ${ipResponse.statusText}`);
      }
      const ipData = await ipResponse.json();
      const ipAddress = ipData.ip;

      // Step 2: Use the IP address to get geolocation data (specifically the country).
      // ip-api.com is a free, public API for this purpose.
      const geoResponse = await fetch(`http://ip-api.com/json/${ipAddress}`);
      if (!geoResponse.ok) {
        throw new Error(`Failed to get geolocation: ${geoResponse.statusText}`);
      }
      const geoData = await geoResponse.json();

      if (geoData.status === 'success') {
        const country = geoData.country;
        setUserCountry(country);

        // Check if the determined country is in the restricted list (case-insensitive comparison).
        const isRestricted = restrictedCountries.some(
          (restricted) => restricted.toLowerCase() === country.toLowerCase()
        );

        setIsEligible(!isRestricted); // If restricted, not eligible; otherwise, eligible.
      } else {
        // Handle cases where geolocation API returns a failure status.
        throw new Error(geoData.message || 'Could not determine your location.');
      }
    } catch (error) {
      console.error('Eligibility verification failed:', error);
      setErrorMessage(`Error: ${error.message}. Please try again.`);
      setIsEligible(false); // Assume not eligible or unable to verify on error
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 flex flex-col items-center justify-center p-4 font-sans">
      <div className="bg-gray-800 p-8 rounded-xl shadow-2xl max-w-lg w-full text-center">
        <h1 className="text-3xl font-bold mb-6 text-green-400">Verify Your Eligibility</h1>
        <p className="text-gray-400 mb-8">
          Click the button below to check if you are eligible to play at The Gentlemen's Club based on your current location.
        </p>

        {/* Button to trigger the eligibility check */}
        <button
          onClick={verifyEligibility}
          disabled={isLoading}
          className="w-full flex items-center justify-center space-x-2 px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 text-white font-bold rounded-lg shadow-lg hover:from-green-600 hover:to-blue-600 focus:outline-none focus:ring-4 focus:ring-green-500 focus:ring-opacity-50 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoading ? (
            // Loading spinner while checking
            <>
              <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span>Checking Eligibility...</span>
            </>
          ) : (
            // Button text when not loading
            <>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                <polyline points="22 4 12 14.01 9 11.01"></polyline>
              </svg>
              <span>Verify Eligibility</span>
            </>
          )}
        </button>

        {/* Display area for results */}
        <div className="mt-8 p-4 rounded-lg">
          {errorMessage && (
            <p className="text-red-500 text-lg font-medium">{errorMessage}</p>
          )}

          {userCountry && !errorMessage && (
            <p className="text-gray-300 text-lg mb-2">Your detected country: <span className="font-semibold text-white">{userCountry}</span></p>
          )}

          {isEligible !== null && !errorMessage && (
            isEligible ? (
              <p className="text-green-400 text-2xl font-bold">ðŸŽ‰ You are eligible to play!</p>
            ) : (
              <p className="text-red-500 text-2xl font-bold">ðŸš« You are not eligible to play from this location.</p>
            )
          )}
        </div>
      </div>
    </div>
  );
}
